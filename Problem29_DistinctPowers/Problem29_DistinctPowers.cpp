/*
Program to calculate the number of distinct
terms in the sequence of integer numbers
generated by a^b, for a and b values in the
range 2 <= a, b <= 100.

Since we only care about distinct terms,
we will want to calculate a^b using a function,
and then compare it against any prior values
to check for duplicates, which we will ignore,
as in problem 21 (amicable numbers).

We then must do this calculation and comparison
for all values of 2 <= a <= 100 and 2 <= b <= 100.
This requires two separate for loops in main(),
one for a and one for b.

Note we don't really care if the values of the
distinct powers are in numerical order in the
vector, only that they are unique, so we
avoid using sort() on the vector here.  Note
the final result is then simply the length
the of std::vector.
*/

#include <cstdint> // for large integer types.
#include <iostream>
#include <vector>

using largeint_t = int_fast64_t;

/* Function to calculate a^b: */
largeint_t calculateAPowB(const largeint_t& a, const largeint_t& b)
{
	largeint_t tempPow{ 1 };
	largeint_t tempBase{ a };
	largeint_t tempExp{ b };

	while (tempExp != 0)
	{
		tempPow *= tempBase;
		--tempExp;
	}

	return tempPow;
}


int main()
{
	/*
	Ask for upper limit on a, b values:
	*/
	std::cout << "Enter the upper bound for values of a, b in the expression a^b: ";
	largeint_t maxAB{};
	std::cin >> maxAB;

	/* Initialize the vector for unique terms
	and boolean for uniqueness, as well as
	a temporary a^b variable:*/
	std::vector<largeint_t> distinctPowers{};
	bool isDistinctPower{ true };
	largeint_t aPowB{ 0 };

	/* Outer for loop for values of a: */
	for (largeint_t a{ 2 }; a <= maxAB ; ++a)
	{
	/* Inner for loop for values of a: */
		for (largeint_t b{ 2 }; b <= maxAB; ++b)
		{
			/* Calculate a^b for given a,b: */
			aPowB = calculateAPowB(a, b);

			/* Now check if it exists in distinctPowers: */
			for (largeint_t c : distinctPowers)
			{
				/* If it exists, don't inlcude it: */
				if (c == aPowB)
				{
					isDistinctPower = false;
				}
			}

			/* If it is distinct, include it: */
			if (isDistinctPower)
			{
				distinctPowers.push_back( aPowB );
			}

			/* Reset boolean: */
			isDistinctPower = true;
		}
	}

	/*
	Now that we have all the unique values in the
	sequence in distinctPowers, we use size()
	to find the number of distinct terms (elements) 
	inthe sequence:
	*/
	std::cout << "The number of distinct terms in the sequence expressed by a^b for 2 <= a,b <= "
		<< maxAB << " is " << distinctPowers.size() << ".\n";


	return 0;
}